
main = {
  SOI
  ~ query_cls
  ~ ch_semi?
  ~ EOI
}

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

select_kw = _{ ^"SELECT" }
register_kw = _{ ^"REGISTER" }
contract_kw = _{ ^"CONTRACT" }
from_kw = _{ ^"FROM" }
where_kw = _{ ^"WHERE" }
with_kw = _{ ^"WITH" }
interface_kw = _{ ^"INTERFACE" }
at_kw = _{ ^"AT" }
and_kw = _{ ^"AND" }
ch_semi = _{ ";" }
ch_dot = _{ "." }
ch_comma = _{ "," }
ch_open_bracket = _{ "[" }
ch_close_bracket = _{ "]" }
ch_open_paren = _{ "(" }
ch_close_paren = _{ ")" }
ch_operator = _{ "=" | "<>" }
ch_multi_operator = _{ ^"IN" | ^"NOT IN" }
wildcard = { "*" }

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{ ASCII_DIGIT+ }
keyword = @{ XID_START ~ ASCII_ALPHANUMERIC* }
literal = { string | number | address }
address = { "0x" ~ ASCII_HEX_DIGIT{40} }
hex = { "0x" ~ ASCII_HEX_DIGIT+ }

list_literal = { ch_open_paren ~ literal_cls ~ ch_close_paren }

literal_cls = _{ literal_0 ~ literal_n* }
literal_0 = _{ literal }
literal_n = _{ ch_comma ~ literal }

query_cls = { query_0 ~ query_n* }
query_0 = { query }
query_n = { ch_semi ~ query }
query = { select_query | register_query }

// REGISTER
register_query = {
  register_kw ~ contract_kw ~ keyword ~ at_kw ~ address ~ ( with_kw ~ interface_kw ~ ch_open_bracket ~ interface_cls ~ ch_close_bracket )?
}

interface_cls = { interface_item ~ interface_item_n* }
interface_item_n = { ch_comma ~ interface_item }
interface_item = { string }

// SELECT
select_query = {
  select_kw ~ selection_cls ~ ( from_kw ~ from_cls )?  ~ ( where_kw ~ where_cls )?
}

selection_cls = { selection_item ~ selection_item_n* }
selection_item_n = { ch_comma ~ selection_item }
selection_item = { full_select_var | literal }
multi_selection_item = { list_literal }

full_select_var = {
  ( ( source ~ ch_dot )? ~ ( variable | wildcard ) ~ params? )
}

params = { ch_open_paren ~ selection_cls? ~ ch_close_paren }

source = @{ keyword }
variable = @{ keyword }

// FROM
from_cls = { from_0 ~ from_n* }
from_0 = { source }
from_n = { ch_comma ~ source }

// WHERE
where_cls = { where_0 ~ where_n* }
where_0 = { binding }
where_n = { and_kw ~ binding }

// BINDING
binding = {
  full_select_var
  ~ ( single_binding_target | multi_binding_target )
}

single_binding_target = { ch_operator ~ selection_item }
multi_binding_target = { ch_multi_operator ~ multi_selection_item }

